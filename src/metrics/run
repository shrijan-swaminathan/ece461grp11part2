#!/bin/bash

# Log file for capturing output
LOG_FILE="app.log"

# Save original stdout to file descriptor 3
exec 3>&1

# Paths relative to the location of this script
SCRIPT_DIR=$(dirname "$0") # The directory where this script is located (src/metrics)
BASE_DIR="$SCRIPT_DIR/../.." # Navigate two levels up to reach the root directory
SRC_DIR="$SCRIPT_DIR/src" # src directory inside metrics
DIST_DIR="$BASE_DIR/dist" # Compiled JavaScript files directory
UTILS_DIR="$DIST_DIR/metrics/src/" # src folder inside dist
METRICS_DIR="$UTILS_DIR/Metrics" # Metrics folder inside dist

# Function to clean the log file
clean_log() {
  echo "Cleaning log file..." >&3
  echo "Cleaning log file..." >> "$LOG_FILE"
  > "$LOG_FILE"
  echo "Log file cleaned." >&3
  echo "Log file cleaned." >> "$LOG_FILE"
}

# Function to install dependencies
install_dependencies() {
  echo "Installing dependencies..." >&3
  echo "Installing dependencies..." >> "$LOG_FILE"
  npm install --prefix "$BASE_DIR" >> "$LOG_FILE" 2>&1
  if [ $? -eq 0 ]; then
    echo "Dependencies installed successfully." >&3
    echo "Dependencies installed successfully." >> "$LOG_FILE"
    exit 0
  else
    echo "Dependency installation failed." >&3
    echo "Dependency installation failed." >> "$LOG_FILE"
    exit 1
  fi
}

# Function to run tests (placeholder for now)
run_tests() {
  echo "Running tests..." >&3
  echo "Running tests..." >> "$LOG_FILE"
  
  # Placeholder for test cases; you can add actual test commands here in the future.
  echo "No test cases implemented yet." >&3
  echo "No test cases implemented yet." >> "$LOG_FILE"
  
  exit 0
}

# Function to process a URL file and run metrics
process_url_file() {
  INPUT_PATH="$1"
  
  if [[ -f "$INPUT_PATH" ]]; then
    echo "File found at path: $INPUT_PATH" >&3
    echo "File found at path: $INPUT_PATH" >> "$LOG_FILE"
    # Run application code
    npx tsc
    if [ $? -ne 0 ]; then
      echo "TypeScript compilation failed." >&3
      exit 1
    fi
    # Read URLs from the input file
    echo "Reading URLs from $INPUT_PATH..." >&3
    echo "Reading URLs from $INPUT_PATH..." >> "$LOG_FILE"
    node $UTILS_DIR/cliClass.js "$INPUT_PATH"
    APP_EXIT_STATUS=$?
    exit $APP_EXIT_STATUS
    # URLS=$(cat "$INPUT_PATH")

    # # Run metrics for each URL
    # for URL in $URLS; do
    #   echo "Processing URL: $URL" >&3
    #   echo "Processing URL: $URL" >> "$LOG_FILE"

    #   # Example: Run each metric function with Node.js (compiled JS files)
    #   echo "Running RampUp metric..." >&3
    #   echo "Running RampUp metric..." >> "$LOG_FILE"
    #   node "$METRICS_DIR/RampUp.js" "$URL" >> "$LOG_FILE" 2>&1

    #   echo "Running BusFactor metric..." >&3
    #   echo "Running BusFactor metric..." >> "$LOG_FILE"
    #   node "$METRICS_DIR/busFactor.js" "$URL" >> "$LOG_FILE" 2>&1

    #   echo "Running Correctness metric..." >&3
    #   echo "Running Correctness metric..." >> "$LOG_FILE"
    #   node "$METRICS_DIR/correctness.js" "$URL" >> "$LOG_FILE" 2>&1

    #   echo "Running License metric..." >&3
    #   echo "Running License metric..." >> "$LOG_FILE"
    #   node "$METRICS_DIR/license.js" "$URL" >> "$LOG_FILE" 2>&1

    #   echo "Running Responsiveness metric..." >&3
    #   echo "Running Responsiveness metric..." >> "$LOG_FILE"
    #   node "$METRICS_DIR/responsiveness.js" "$URL" >> "$LOG_FILE" 2>&1

    # done

    # echo "All metrics processed successfully!" >&3
    # echo "All metrics processed successfully!" >> "$LOG_FILE"
    # exit 0
  else
    echo "File not found at the provided path: $INPUT_PATH" >&3
    echo "File not found at the provided path: $INPUT_PATH" >> "$LOG_FILE"
    exit 1
  fi
}

# Main logic to handle arguments passed to the script
if [ "$1" == "cleanLog" ]; then
  clean_log

elif [ "$1" == "install" ]; then
  install_dependencies

elif [ "$1" == "test" ]; then
  run_tests

elif [[ -n "$1" ]]; then
  process_url_file "$1"

else
  echo "Invalid command or file not found: $1" >&3
  echo "Invalid command or file not found: $1" >> "$LOG_FILE"
  exit 1
fi
